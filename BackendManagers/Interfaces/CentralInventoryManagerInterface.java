package BackendManagers.Interfaces;

import Items.ItemHeaderInfo;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Interface for the Central Inventory Manager.  The implementing class should follow the specifications
 *   listed in the project description ("Story 5").
 *
 * <bold>251 students: you may use any of the data structures you have previously created, but may not use
 *   any Java.util library except List/ArrayList.</bold>
 */
public interface CentralInventoryManagerInterface {
    /**
     * Basically just a pair storing an item's ID and count
     */
    class ItemCount {
        public int itemID;
        public long count;
        //simple constructor for a simple object
        public ItemCount(int itemID, long count) { this.itemID = itemID; this.count = count; }

        //default equals generated by intellij
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof ItemCount)) return false;
            ItemCount itemCount = (ItemCount) o;
            return itemID == itemCount.itemID && count == itemCount.count;
        }

        /**
         * This might be helpful for debugging. Default generated one.
         * @return string version of object
         */
        @Override
        public String toString() {
            return "ItemCount{" + "itemID=" + itemID + ", count=" + count + '}';
        }
    }

    /**
     * Class used to store and retrieve request responses from our central inventory.
     *
     * @apiNote at this layer we cannot (usually) tell what kind of request the client made. That knowledge
     *   is not important when we hand this object to the network layer, as it will just send off the entire
     *   object. The network layer will also add its own header information about the client's original
     *   request packet that will allow the client to identify what kind of request it originally made and
     *   how to interpret the response sent back through this object.
     */
    class InventoryResponse {
        /**
         * Defines operational success. Meaning varies slightly per operation (see official documentation).
         */
        public boolean success;
        /**
         * Indicates the count of any one item a client requested to change.
         */
        public ItemCount updatedItem;
        /**
         * Contains all the header information about queried objects. Not complete records, those are kept by
         *   our distributed servers. Only bare-bones information we deemed necessary to hold in the central hub.
         */
        public List<ItemHeaderInfo> items = null;

        //default generated constructor
        public InventoryResponse(boolean success, ItemCount updatedItem, List<ItemHeaderInfo> items) {
            this.success = success;
            this.updatedItem = updatedItem;
            //this is called making a deep copy of an object.  It requires manually copying the data so that
            //  pointers aren't copied instead (holding old pointers is a bad idea... especially when you are
            //  actively using and changing them)
            if(items != null){
                this.items = new ArrayList<>(items.size());
                for(var i : items) this.items.add(i.clone());
            } //else is handled by initializer
        }

        //default equals generated by intellij
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof InventoryResponse)) return false;
            InventoryResponse that = (InventoryResponse) o;
            //just fyi Objects.equals will attempt to call .equals on the first object, if it is
            //  not null, which is the behavior we desire
            return success == that.success && Objects.equals(updatedItem, that.updatedItem) && Objects.equals(items, that.items);
        }

        /**
         * This might be helpful for debugging.
         * @return string version of object
         */
        @Override
        public String toString() {
            return "InventoryResponse{" + "success=" + success + ", updatedItem=" + updatedItem + ", items=" +  items + '}';
        }
    }

    /**
     * Gets the request responses per the specifications.
     *
     * @param filename file to read input from
     * @return the list of appropriate responses, in the order of the requests, as per the specifications
     */
    List<InventoryResponse> getRequestResponses(String filename);
}
